// Code generated by goctl. DO NOT EDIT.
// Source: job.proto

package job

import (
	"context"

	"rpc/app/service/job/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CollectJobReq  = pb.CollectJobReq
	CollectJobResp = pb.CollectJobResp
	CountJobReq    = pb.CountJobReq
	CountJobResp   = pb.CountJobResp
	Jobs           = pb.Jobs
	JoinDataReq    = pb.JoinDataReq
	JoinDataReq2   = pb.JoinDataReq2
	JoinDataResp   = pb.JoinDataResp
	JoinDataResp2  = pb.JoinDataResp2
	ViewJobsReq    = pb.ViewJobsReq
	ViewJobsResp   = pb.ViewJobsResp
	ViewWordReq    = pb.ViewWordReq
	ViewWordResp   = pb.ViewWordResp
	Words          = pb.Words

	Job interface {
		CountJob(ctx context.Context, in *CountJobReq, opts ...grpc.CallOption) (*CountJobResp, error)
		JoinData(ctx context.Context, in *JoinDataReq, opts ...grpc.CallOption) (*JoinDataResp, error)
		JoinData2(ctx context.Context, in *JoinDataReq2, opts ...grpc.CallOption) (*JoinDataResp2, error)
		ViewJobs(ctx context.Context, in *ViewJobsReq, opts ...grpc.CallOption) (*ViewJobsResp, error)
		CollectJob(ctx context.Context, in *CollectJobReq, opts ...grpc.CallOption) (*CollectJobResp, error)
		ViewWord(ctx context.Context, in *ViewWordReq, opts ...grpc.CallOption) (*ViewWordResp, error)
	}

	defaultJob struct {
		cli zrpc.Client
	}
)

func NewJob(cli zrpc.Client) Job {
	return &defaultJob{
		cli: cli,
	}
}

func (m *defaultJob) CountJob(ctx context.Context, in *CountJobReq, opts ...grpc.CallOption) (*CountJobResp, error) {
	client := pb.NewJobClient(m.cli.Conn())
	return client.CountJob(ctx, in, opts...)
}

func (m *defaultJob) JoinData(ctx context.Context, in *JoinDataReq, opts ...grpc.CallOption) (*JoinDataResp, error) {
	client := pb.NewJobClient(m.cli.Conn())
	return client.JoinData(ctx, in, opts...)
}

func (m *defaultJob) JoinData2(ctx context.Context, in *JoinDataReq2, opts ...grpc.CallOption) (*JoinDataResp2, error) {
	client := pb.NewJobClient(m.cli.Conn())
	return client.JoinData2(ctx, in, opts...)
}

func (m *defaultJob) ViewJobs(ctx context.Context, in *ViewJobsReq, opts ...grpc.CallOption) (*ViewJobsResp, error) {
	client := pb.NewJobClient(m.cli.Conn())
	return client.ViewJobs(ctx, in, opts...)
}

func (m *defaultJob) CollectJob(ctx context.Context, in *CollectJobReq, opts ...grpc.CallOption) (*CollectJobResp, error) {
	client := pb.NewJobClient(m.cli.Conn())
	return client.CollectJob(ctx, in, opts...)
}

func (m *defaultJob) ViewWord(ctx context.Context, in *ViewWordReq, opts ...grpc.CallOption) (*ViewWordResp, error) {
	client := pb.NewJobClient(m.cli.Conn())
	return client.ViewWord(ctx, in, opts...)
}
